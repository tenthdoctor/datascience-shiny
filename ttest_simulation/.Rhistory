ls
ls()
?ls
c?
exit
?c
setwd("~/Dropbox/Class/252/")
dir
dir()
setwd("Week1/")
dir
dir()
dir("data")
deaths = read.csv("data/earlydeaths.csv")
deaths
deaths[:1-]
deaths[:1-]
deaths[:10]
deaths[1:10]
deaths.time
deaths[time]
deaths["time"]
deaths["time"][:10]
deaths["time"][1:10]
?read.csv
?load.csv
help(read.csv)
?var
?read.csv
?table
d0 = c(26,31,45)
d0
rs1 = chisq.test(c(26,31,45), p=c(1,1,1), rescale.p=T, simulate.p.value=F)
print(rs1)
md = c(11,15,15,16,25,20)
md
mean(md
)
var(md)
?var
sqrt(var(md))
sqrt(var(md))/len(md)
sqrt(var(md))/length(md)
?stderr
setwd()
dir()
setwd("Class/252/Week1/")
d0 = read.csv("data/earlydeaths.csv")
?tabe
?table
View(`d0`)
View(`d0`)
deaths = table(d0$time, d0$cause)
deaths
deaths = t(deaths)
deaths
chisq.test(d0
)
chisq.test(d0[1:3,1], d0[1:3,2])
d0[1]
deaths[1]
deaths[1:3]
chisq.test(d0[1:3], d0[4:6])
chisq.test(deaths[1:3], deaths[4:6])
?chisq.test
chisq.test(deaths[1:3], p=deaths[4:6])
chisq.test(deaths[1:3], p=deaths[4:6], rescale.p=T)
deaths
chisq.test(deaths)
jobs = rbind(c(18,14,8), c(12,16,32)
)
jobs
jobs = table(jobs)
jobs
jobs = table(c(18,14,8), c(12,16,32)
)
jobs
?table
jobs = table(na,
d0$cause
jobs = table(c(18,14,8), c(12,16,32))
jobs
jobs = matrix(c(18,14, 8, 12,16,32), byrow=T, ncol=3)
jobs
chisq.test(jobs
)
d1 = read.csv('fieldsimul1.csv')
d1 = read.csv('data/fieldsimul1.csv')
d1
?density
x0 = c(1:3, 5 7 9)
x0 = c(1:3, 5, 7, 9)
p0 = c(.2, .4, .24, .1, .05, .01)
p0
mu0 = sum(x0*p0)/sum(p0)
mu0
o1 = sample(d0, 1000, replace=T, prob=p0)
o1 = sample(d0, 1000, replace=T, prob=p0)
x0
p0
length(p0)
length(x0)
o1 = sample(d0, 1000, replace=T, prob=p0)
?sample
o1 = sample(x0, 1000, replace=T, prob=p0)
o1
hist(o1)
density(o1, adjust=3)
sm1 = density(o1, adjust=3)
sm1
plot(sm1)
lines(sm1)
lines(sm1)
lines(sm1)
plot(sm1)
lines(sm1)
hist(o1)
?X11
mu0
?test.t
t.test
?t.test
t.test(o1, mu=mu1)
mu0
t.test(o1, mu=mu0)
D0
d0
o2 = sample(d0, 7, replace=T, prob=p0)
o2 = sample(x0, 7, replace=T, prob=p0)
02
o2
hist(o2)
mean(o2)
mu0
tsc = t.test(o2, mu=mu0, paired=F)
tsc
tsc/2
tsc.t
ls(tsc)
t.statistic
t:statistic
t$statistic
tsc$statistic
t_scores = vector(mode=float, length=1000)
?vector
t_scores = vector(mode="float"", length=1000)
t_scores = vector(mode="float, length=1000)
t_scores = vector(mode="float"", length=1000)
t_scores = vector(mode="float", length=1000)
t_scores = vector(length=1000)
t_scores
t_scores = vector("list", 1000)
t_scores
t_scores = vector("numeric"", 1000)
t_scores = vector("numeric", 1000)
t_scores
?for
for (i in 1:1000)
o = sample(x0, 7, replace=T, prob=p0)
for (i in 1:1000)
o = sample(x0, 7, replace=T, prob=p0);
for (i in 1:1000)
o = sample(x0, 7, replace=T, prob=p0); t_scores[i] = t.test(o, mu=mu0)$statistic
t_scores
i
for (i in 1:1000); print i
for (i in 1:1000) print i
for (i in 1:1000) print(i)
o = sample(x0, 7, replace=T, prob=p0); t_scores[i] <- t.test(o, mu=mu0)$statistic
o
t.test(o, mu=mu0)
t.test(o, mu=mu0)$statistic
t_scores[-5] = .Last.value
t_scores
t_scores[-5]
t_scores
?t_scores
t_scoes
t_scores
lenth(t_scores)
length(t_scores)
t_scores[1]
t_scores[-5]
t_scores[1000] = .Last.value
t_scores[1000] = .5
t_scores[-5]
t_scores = vector("numeric", 1000)
for (1 in 1:1000) vector[i] = t.test(sample(x0, 7, replace=T, prob=p0))$statistic
for (i in 1:1000) vector[i] = t.test(sample(x0, 7, replace=T, prob=p0))$statistic
for (i in 1:1000) vector[i] = t.test(sample(x0, 7, replace=T, prob=p0))$statistic
t.test(sample(x0, 7, replace=T, prob=p0))$statistic
vector[i] = t.test(sample(x0, 7, replace = T, prob = p0))$statistic
t.test(sample(x0, 7, replace = T, prob = p0))$statisti
t.test(sample(x0, 7, replace = T, prob = p0))$statistic
res = t.test(sample(x0, 7, replace = T, prob = p0))
res
res$statistic
res$statistic + 5
foo = c(0,0,0)
foo
foo[1] = res$statistic
foo
res = t.test(sample(x0, 7, replace = T, prob = p0))$statistic
res
foo[2] = t.test(sample(x0, 7, replace = T, prob = p0))$statistic
foo
res
for (i in 1:1000) vector[i] = t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
t.test(sample(x0, 7, replace = T, prob = p0), mu = mu0)$statistic
fo;
for (i in 1:1000) {res = t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0); t_scores[i] = res$statistic}
x0
for (i in 1:1000) {res = t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0); t_scores[i] = res$statistic}
t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)
t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)
for (i in 1:1000){}
for (i in 1:1000){
res = t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)
t_scores[i] = res$statistic
}
res
for (i in 1:1000){
draw = sample(x0, 7, replace=T, prob=p0)
res = t.test(draw, mu=mu0)
t_scores[i] = res$statistic
}
for (i in 1:1000){
+ draw = sample(x0, 7, replace=T, prob=p0)
+ res = t.test(draw, mu=mu0)
+ t_scores[i] = res$statistic
+ }
for (i in 1:1000){
+ draw = sample(x0, 7, replace=T, prob=p0); print(mean(draw))
+ res = t.test(draw, mu=mu0)
+ t_scores[i] = res$statistic
+ }
for (i in 1:1000){
+ draw = sample(x0, 7, replace=T, prob=p0); print(mean(draw))
+ res = t.test(draw, mu=mu0)
+ t_scores[i] = res$statistic
+ }
for (i in 1:1000){
+ draw = sample(x0, 7, replace=T, prob=p0); print(mean(draw))
+ res = t.test(draw, mu=mu0)
+ t_scores[i] = res$statistic }
+
for (i in 1:1000){
draw = sample(x0, 7, replace=T, prob=p0); print(mean(draw))
res = t.test(draw, mu=mu0)
}
x0
p0
mu0
t.test?
?t.test
for (i in 1:1000) myvec[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
myvec = 0
for (i in 1:1000) myvec[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
myvec
plot(myvec)
hist(myvec)
for (i in 1:1000) myvec[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
for (i in 1:1000) myvec[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
for (i in 1:1000) myvec[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
for (i in 1:1000) myvec[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
v = vector("numeric", 1000)
v
for (i in 1:1000) v[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
for (i in 1:1000) v[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
for (i in 1:1000) v[i] <- t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
for (i in 1:1000) v[i] = t.test(sample(x0, 7, replace=T, prob=p0), mu=mu0)$statistic
sample(x0, 7, replace=T, prob=p0)
sample(x0, 7, replace=T, prob=p0)
sample(x0, 7, replace=T, prob=p0)
sample(x0, 7, replace=T, prob=p0)
sample(x0, 7, replace=T, prob=p0)
dir()
open("r_scripts/smonte1.r")
?quantile
?sprintf
sprintf("hello%s", "world")
mal_deaths = c(11, 15, 15, 16, 25, 20)
mal_mean = mean(mal_deaths)
mal_var = var(mal_deaths)
mal_std = sqrt(var)
print("Problem 1.b.i:")
print(sprintf("Maltreatment death statistics:\n
\tMean: %.3f\n
\tVariance: %.3f\n
\tS.D.: %.3f", mal_mean, mal_var, mal_std)
)
?var
var(c(1,2,3,4,5,3,7,2,3))
sqrt(var(c(1,2,3,4,5,3,7,2,3)))
var(c(1,2,3,4,5,3,7,2,3))
getwd()
setwd("Class/252/Week1/")
source("hw.r")
setwd("~/Dropbox/TA/252/github/Week2")
library(shiny)
runApp("sampling_and_stderr")
cut(rnorm(10), breaks=c(1))
cut(rnorm(10), breaks=c(1, 2))
max(hist(rnorm(100)))
max(hist(rnorm(100))$counts)
runApp()
runApp("sampling_and_stderr")
d <- c(80, 76, 81, 72, 68, 76)
m <- mean(d)
s <- sd(d)
s.from.var = sqrt(var(d))
s == s.from.vac
s == s.from.var
ci.low <- m - se * 1.96
ci.high <- m + se * 1.96
sprintf("95%% CI: %.2f, %.2f", ci.low, ci.high)
ci.low <- m - se * 1.96
ci.high <- m + se * 1.96
sprintf("95%% CI: %.2f, %.2f", ci.low, ci.high)
n <- length(d)
se <- s / n ^ .5
ci.low <- m - se * 1.96
ci.high <- m + se * 1.96
sprintf("95%% CI: %.2f, %.2f", ci.low, ci.high)
for i in 1:10 { print(i) }
for i = 1:10 { print(i) }
for (i = 1:10) { print(i) }
for (i in 1:10) { print(i) }
matrix(rnorm(10), nrow=2)
d = matrix(rnorm(10), nrow=2)
apply(d, mean)
apply(d, 1, mean)
pt(c(1, 2, 3))
pt(c(1, 2, 3), 18)
pt(c(1, 2, 3), 18, lower.tail=TRUE)
pt(c(1, 2, 3), 18, lower.tail=FALSE)
apply(d, 1, t.test)
runApp("ttest_simulation")
n.sim <- 1000
input = list(sample.size=20, true.mean=0, true.sd=1)
sample.data <- rnorm(n.sim * input$sample.size, input$true.mean, input$true.sd)
sample.data <- matrix(sample.data, nrow=n.sim)
sample.means <- apply(sample.data, 1, mean)
sample.sems <- apply(sample.data, 1, sd) / sqrt(input$sample.size)
t.stats = sample.means / sample.sems
p.values = pt(t.stats, input$sample.size - 1)
tb
traceback
traceback()
runApp("ttest_simulation")
?power.t.test
power.t.test(20, 1, 1, .05)
power.t.test(20, 1, 1, .05)$power
runApp("ttest_simulation")
runApp("ttest_simulation")
traceback
traceback()
runApp("ttest_simulation")
